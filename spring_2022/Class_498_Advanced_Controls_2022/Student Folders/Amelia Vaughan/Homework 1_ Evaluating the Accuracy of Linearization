{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"CispnEmU6rn-"},"outputs":[],"source":[""]},{"cell_type":"markdown","metadata":{"id":"BOor_aq27yd6"},"source":["# Preliminaries"]},{"cell_type":"code","execution_count":371,"metadata":{"executionInfo":{"elapsed":12858,"status":"ok","timestamp":1651377467770,"user":{"displayName":"Amelia Reesman","userId":"09108454811591261519"},"user_tz":420},"id":"mTHF_gtg7Mw9"},"outputs":[],"source":["!pip install -q control\n","!pip install -q tellurium\n","\n","import control\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import tellurium as te"]},{"cell_type":"markdown","metadata":{"id":"SuALaEKS6sL_"},"source":["You will compare the linearized version of NONLINEAR_MDL with a Tellurium simulation of the model.\n","\n","1) (5 pts) Construct a function that takes as input a time and a species name, and outputs a plot that compares a tellurium simulation of the species with a linearized model for the species (with S1 as input, as we did in lecture 9). Remember to document your function and include tests (as described in the rules for writing reproducible software).\n","\n","2) (3 pts) Use this function to analyze S2 and S3 for the operating points  0, 0.3, and 2.\n","\n","3) (2 pts) Where are the largest discrepancies between the original simulation and the linearized models? Why?"]},{"cell_type":"markdown","metadata":{"id":"KQ1TyHnJP-HG"},"source":["# NONLINEAR_MDL"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"elapsed":172,"status":"error","timestamp":1651385948816,"user":{"displayName":"Amelia Reesman","userId":"09108454811591261519"},"user_tz":420},"id":"2NMt-dFmDvT3","outputId":"f5e5b5ba-5b54-4df6-a080-11b1117b0eaa"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-94e2bcddd3f5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mS3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \"\"\"\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0mNONLINEAR_RR\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mte\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloada\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mNONLINEAR_MDL\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0mNONLINEAR_DATA\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mNONLINEAR_RR\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msimulate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;31m#NONLINEAR_RR.getFloatingSpeciesIds()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'te' is not defined"]}],"source":["NONLINEAR_MDL = \"\"\"\n","JN1: S1 -> S2; k1*S1\n","JN2: S1 +  S2 -> 3 S3; k2*S1*S2\n","JN3: S3 -> ; k3*S3\n","JN4: 2 S1 + S3 -> S2; k4*S1*S3\n","\n","k1 = 2\n","k2 = 1.5\n","k3 = 1\n","k4 = 0.5\n","S1 = 10\n","S2 = 0\n","S3 = 0\n","\"\"\"\n","NONLINEAR_RR = te.loada(NONLINEAR_MDL)\n","NONLINEAR_DATA = NONLINEAR_RR.simulate()\n","#NONLINEAR_RR.getFloatingSpeciesIds()\n","#NONLINEAR_DATA[0:,0:1]\n","#NONLINEAR_DATA=NONLINEAR_RR.simulate()\n","#NONLINEAR_DATA[:1,1:]\n","NONLINEAR_RR.keys()\n","for key in keys:\n","  NONLINEAR_RR[key] = kwargs[key]\n"]},{"cell_type":"code","execution_count":377,"metadata":{"executionInfo":{"elapsed":147,"status":"ok","timestamp":1651377568365,"user":{"displayName":"Amelia Reesman","userId":"09108454811591261519"},"user_tz":420},"id":"dLeDirIifVwO"},"outputs":[],"source":["def NoName(MODEL_STR,time):\n","    '''\n","    Retrieves the value of state at the specified time.\n","    Changes the time of the roadrunner.\n","    \n","    Parameters\n","    ----------\n","    time: float\n","    roadrunner: ExtendedRoadrunner\n","    \n","    Returns\n","    -------\n","    list \n","    '''\n","    roadrunner = te.loada(MODEL_STR)\n","    MODEL_STR_DATA = roadrunner.simulate()\n","    roadrunner.reset()\n","    OP_Time = time \n","    if time > 0:\n","      roadrunner.simulate(0, OP_Time)  \n","    species_lst = roadrunner.getFloatingSpeciesIds()\n","    dct = {s: roadrunner[s] for s in species_lst}\n","    #v = list(dct.values())\n","    #OP_time = time\n","    #OP_vec = np.array(list(v(OP_time).values()))\n","    #NUM_STATE = len(vec)\n","    #X0 = np.array(list(dct(0).values()))#OP_MODLE_STR_DATA[:1,1:]\n","    #extract Jacobian  \n","    A = roadrunner.getFullJacobian()\n","\n","    B = [[1],\n","        [0],\n","        [0]] \n","    B= np.reshape(B, (NUM_STATE, 1))\n","    C = [0,0,1]  \n","    C = np.reshape(C, (1, NUM_STATE))\n","    D = 0 \n","\n","    #control.forced_response(control.StateSpace(A, B, C, D), TIMES , X0)\n","    #roadrunner.reset()\n","\n","    return (dct, "]},{"cell_type":"code","execution_count":378,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":150,"status":"ok","timestamp":1651377570318,"user":{"displayName":"Amelia Reesman","userId":"09108454811591261519"},"user_tz":420},"id":"FUHvFz4A8SuN","outputId":"070f8d78-cba4-49d7-be41-e37c6f73472d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'S1': -4.963049894170401e-19,\n"," 'S2': 2.2697040671832824,\n"," 'S3': 0.0003738363986602917}"]},"metadata":{},"execution_count":378}],"source":["NoName(NONLINEAR_MDL,10)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MthVsoB-8OYI"},"outputs":[],"source":[""]},{"cell_type":"markdown","metadata":{"id":"_cVOz4AaA99y"},"source":["# Clean Slate "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ebf_kRY3X100"},"outputs":[],"source":["def getStateValues(time, roadrunner=NONLINEAR_RR):\n","    \"\"\"\n","    Retrieves the value of state at the specified time.\n","    Changes the time of the roadrunner.\n","    \n","    Parameters\n","    ----------\n","    time: float\n","    roadrunner: ExtendedRoadrunner\n","    \n","    Returns\n","    -------\n","    list \n","    \"\"\"\n","    roadrunner.reset()\n","    #Set operating point \n","    OP_TIME = time\n","    OP_VEC = roadrunner.getStateValues(OP_TIME)\n","    NUM_STATE = len(OP_VEC)\n","    if time > 0:\n","        roadrunner.simulate(0, time)\n","    species_lst = roadrunner.getFloatingSpeciesIds()\n","    StateDct = {s: roadrunner[s] for s in species_lst}\n","     list(dct.values())\n","        \n","# Tests\n","lst = getStateValues(0.5)\n","assert(len(lst) == 3)\n","lst1 = getStateValues(1)  # Get different values at a different time\n","#assert(all([lst[s] != lst1[s] for s in dct.keys()]))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":218},"executionInfo":{"elapsed":171,"status":"error","timestamp":1651179441664,"user":{"displayName":"Amelia Reesman","userId":"09108454811591261519"},"user_tz":420},"id":"x6ozckxZBOof","outputId":"c01b85bf-c075-41ed-a2e1-93a8bdb860e3"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-3bc581cb23b2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mNONLINEAR_RR\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mte\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloada\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mNONLINEAR_MDL\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mNONLINEAR_DATA\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mNONLINEAR_RR\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msimulate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mNONLINEAR_DATA\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#control.TransferFunction(NONLINEAR_DATA[1:], NONLINEAR_DATA[4:])\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'NONLINEAR_MDL' is not defined"]}],"source":["NONLINEAR_RR = te.loada(NONLINEAR_MDL)\n","NONLINEAR_DATA=NONLINEAR_RR.simulate()\n","NONLINEAR_DATA[:,3:]\n","#control.TransferFunction(NONLINEAR_DATA[1:], NONLINEAR_DATA[4:])\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"elapsed":161,"status":"error","timestamp":1651359291971,"user":{"displayName":"Amelia Reesman","userId":"09108454811591261519"},"user_tz":420},"id":"ZjavVA1CCXzW","outputId":"253719e9-d84d-42f5-cee8-d13896bdfb36"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-22729af27c1a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mroadrunner\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mte\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloada\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMODEL_STR\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m#Simulate nonlinear model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'MODEL_STR' is not defined"]}],"source":["#def LINEARIZE(MODEL_SRT, OP_TIME, SPECIES):\n"," \n","  \n","roadrunner = te.loada(MODEL_STR)\n","\n","#Simulate nonlinear model\n","NONLINEAR_DATA = roadrunner.simulate()\n","\n","#Reset roadrunner simulation \n","#roadrunner.reset() #restets to time zero\n","#simulate at operating point\n","OP_TIME = 1\n","OP_VEC = roadrunnernp.array(list(getStateDct(time, **kwargs).values()))\n","#X0 = roadrunner.getStateValues(0)\n","#np.array(list(getStateDct(time, **kwargs).values()))\n","  \n","#extract Jacobian  \n","A = roadrunner.getFullJacobian()\n","\n","B = [[1],\n","      [0],\n","      [0]] #np.reshape(B, (NUM_STATE, 1))\n","C = [0,0,1]  #np.reshape(C, (1, NUM_STATE))\n","D = 0 \n","\n","ss = control.StateSpace(A, B, C, D)\n","\n","print(ss)"]},{"cell_type":"markdown","metadata":{"id":"5CKXXws9A16s"},"source":["# things I have tried and dont like "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OqjWYDofKIBR"},"outputs":[],"source":["NONLINEAR_RR = te.loada(NONLINEAR_MDL)\n","NONLINEAR_DATA=NONLINEAR_RR.simulate()\n","NONLINEAR_DF = arrtoDF(NONLINEAR_DATA)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9ESKIFD3K-EQ"},"outputs":[],"source":["#def runSimulation(DataFrame, OP_TIME, species): #isPlot=true):\n","    '''\n","    Linearizes aroung operating point and produces plot of linear and nonlinear species \n","    \n","    Parameters\n","    ----------\n","    MODEL_Name : str\n","    OP_TIME : float\n","    Species : str\n","      e.g. 'S1', 'S2'\n","    isplot : TYPE, optional\n","        DESCRIPTION. The default is true.\n","\n","    Returns\n","    -------\n","    dict: \n","        key: pct\n","        value: DataFrame\n","\n","    '''\n","    roadrunner = te.loada(MODEL_STR)\n","    NONLIN = roadrunner[species]\n","    #simulate to operating point\n","    roadrunner.simulate(OP_TIME)\n","    OP_VEC = roadrunner.getStateValues(OP_TIME)\n","    NUM_STATE = len(OP_VEC)\n","    X0 = roadrunner.getStateValues(0)  \n","    #extract Jacobian  \n","    A = roadrunner.getFullJacobian() \n","    if not species in roadrunner.keys():\n","        raise ValueError(\"Unknown species name: %s\" % species)\n","    resultDct = {}\n","    for v in time:\n","        roadrunner.reset()\n","        NONLINEAR_SS = control.StateSpace(A,B,C,D)\n","        df = arrtoDF(control.forced_response(NONLINEAR_SS,  [0.1*v for v in range(51)], X0))\n","        #title = \"%s: %f (%d%%)\" %(parameter, newValue, percent)\n","        resultDct[species] = df\n","        #if isPlot:\n","          #  timePlots(df=df, title = title)\n","    return resultDct "]},{"cell_type":"markdown","metadata":{"id":"-t29CVVqMPt9"},"source":[""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3Iq2cYbcO89j"},"outputs":[],"source":["def LINEARIZE(OP_TIME,roadrunner):\n","  \"\"\"\n","  Sets the operating point for Jacobian matrix \n","\n","  Parameteres\n","  ------\n","  OP_TIME = float\n","  roadrunner: ExtendedRoadrunner\n","\n"," \n","  Returns\n","  ------\n","  \n","  \"\"\"\n","  roadrunner.reset()\n"," \n","  #simulate to operating point\n","  roadrunner.simulate(OP_TIME)\n","  OP_VEC = roadrunner.getStateValues(OP_TIME)\n","  NUM_STATE = len(OP_VEC)\n","  X0 = roadrunner.getStateValues(0)\n","  #extract Jacobian  \n","  A = roadrunner.getFullJacobian() \n","  B = np.array((NUM_STATE, 1))\n","  C = np.array((1, NUM_STATE))\n","\n","  NONLINEAR_SS = control.StateSpace(A,B,C,D)\n","  results = control.forced_response(NONLINEAR_SS,  [0.1*v for v in range(51)], X0)\n","  return results"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":131},"executionInfo":{"elapsed":171,"status":"error","timestamp":1650953574363,"user":{"displayName":"Amelia Reesman","userId":"09108454811591261519"},"user_tz":420},"id":"0uY01ZjmfTKH","outputId":"b997039c-b587-4dbd-b765-8e5852faae81"},"outputs":[{"ename":"SyntaxError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-24-5088b0bfd89f>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    for S1\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}],"source":["# Determin B and C for steady state\n","  B = INPUT\n","  C = OUTPUT\n","  # D for steady state \n","  D=[[0.]]\n","\n","  NONLINEAR_SS = control.StateSpace(A,B,C,D)\n","  control.forced_response(NONLINEAR_SS,  [0.1*v for v in range(51)], X0=getStateValues(0))\n","\n","  NONLINEAR_SS = control.StateSpace(A,B,C,D)\n","  control.forced_response(NONLINEAR_SS,  [0.1*v for v in range(51)], X0=getStateValues(0))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a_2-KAFQC-Fu"},"outputs":[],"source":["def analyze(time, species):\n","    \"\"\"\n","    Plots comparisons of the Tellurium simulation of the original model with\n","    its linearization at a time point for a particular species.\n","    The analysis is for NONLINEAR_MDL.\n","\n","    Parameters\n","    ----------\n","    time: float\n","    species: str\n","        e.g. \"S2\", \"S3\"\n","    \"\"\""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0OWVXk0rDwa4"},"outputs":[],"source":["for time in [0, 0.3, 2.0]:\n","    for species in [\"S2\", \"S3\"]:\n","        analyze(time, species)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":298},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1650944533912,"user":{"displayName":"Amelia Reesman","userId":"09108454811591261519"},"user_tz":420},"id":"r_OTmsWlDvT_","outputId":"04b97ab7-6948-430a-e19e-4bd6f98728bd"},"outputs":[{"data":{"text/plain":["Text(0.5, 1.0, 'S3 with initial conditions')"]},"execution_count":20,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# result.t are the times of the simulation\n","# result.y are the output values\n","plt.plot(result.t.flatten(), result.y.flatten())\n","plt.ylim([0, 10])\n","plt.title(\"S3 with initial conditions\")"]}],"metadata":{"colab":{"collapsed_sections":[],"name":"Homework 1: Evaluating the Accuracy of Linearization","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyPRIW5KU2w0IsvOYcIbBQP/"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}