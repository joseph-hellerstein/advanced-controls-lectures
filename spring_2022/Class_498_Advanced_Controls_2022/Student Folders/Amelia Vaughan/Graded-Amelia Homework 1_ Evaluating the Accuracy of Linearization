{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Graded-Amelia Homework 1: Evaluating the Accuracy of Linearization","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"CispnEmU6rn-","executionInfo":{"status":"ok","timestamp":1651103220125,"user_tz":420,"elapsed":395,"user":{"displayName":"Joseph Hellerstein","userId":"07301174361489660166"}}},"outputs":[],"source":[""]},{"cell_type":"markdown","source":["# Preliminaries"],"metadata":{"id":"BOor_aq27yd6"}},{"cell_type":"code","source":["!pip install -q control\n","!pip install -q tellurium\n","\n","import control\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import tellurium as te"],"metadata":{"id":"mTHF_gtg7Mw9","executionInfo":{"status":"ok","timestamp":1651103259977,"user_tz":420,"elapsed":39855,"user":{"displayName":"Joseph Hellerstein","userId":"07301174361489660166"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"85ca9c29-1a1b-4e97-d16d-9ac707c1ec82"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[?25l\r\u001b[K     |█                               | 10 kB 19.9 MB/s eta 0:00:01\r\u001b[K     |█▉                              | 20 kB 21.2 MB/s eta 0:00:01\r\u001b[K     |██▊                             | 30 kB 14.9 MB/s eta 0:00:01\r\u001b[K     |███▋                            | 40 kB 13.4 MB/s eta 0:00:01\r\u001b[K     |████▋                           | 51 kB 10.9 MB/s eta 0:00:01\r\u001b[K     |█████▌                          | 61 kB 12.5 MB/s eta 0:00:01\r\u001b[K     |██████▍                         | 71 kB 12.5 MB/s eta 0:00:01\r\u001b[K     |███████▎                        | 81 kB 10.8 MB/s eta 0:00:01\r\u001b[K     |████████▎                       | 92 kB 11.8 MB/s eta 0:00:01\r\u001b[K     |█████████▏                      | 102 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |██████████                      | 112 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |███████████                     | 122 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |████████████                    | 133 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |████████████▉                   | 143 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |█████████████▊                  | 153 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |██████████████▋                 | 163 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |███████████████▋                | 174 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |████████████████▌               | 184 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |█████████████████▍              | 194 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |██████████████████▎             | 204 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |███████████████████▎            | 215 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |████████████████████▏           | 225 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |█████████████████████           | 235 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 245 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 256 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▉        | 266 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▊       | 276 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▋      | 286 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▌     | 296 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▌    | 307 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▍   | 317 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▎  | 327 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▏ | 337 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▏| 348 kB 12.7 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 357 kB 12.7 MB/s \n","\u001b[?25h  Building wheel for control (setup.py) ... \u001b[?25l\u001b[?25hdone\n","\u001b[K     |████████████████████████████████| 121 kB 18.1 MB/s \n","\u001b[K     |████████████████████████████████| 36.7 MB 68 kB/s \n","\u001b[K     |████████████████████████████████| 3.3 MB 62.0 MB/s \n","\u001b[K     |████████████████████████████████| 38.1 MB 223 kB/s \n","\u001b[K     |████████████████████████████████| 3.2 MB 49.6 MB/s \n","\u001b[K     |████████████████████████████████| 54.8 MB 1.1 MB/s \n","\u001b[K     |████████████████████████████████| 2.1 MB 47.9 MB/s \n","\u001b[K     |████████████████████████████████| 2.6 MB 47.5 MB/s \n","\u001b[K     |████████████████████████████████| 5.6 MB 43.3 MB/s \n","\u001b[K     |████████████████████████████████| 6.9 MB 64.1 MB/s \n","\u001b[K     |████████████████████████████████| 5.0 MB 41.7 MB/s \n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","albumentations 0.1.12 requires imgaug<0.2.7,>=0.2.5, but you have imgaug 0.2.9 which is incompatible.\u001b[0m\n","\u001b[?25h"]}]},{"cell_type":"markdown","source":["You will compare the linearized version of NONLINEAR_MDL with a Tellurium simulation of the model.\n","\n","1) (5 pts) Construct a function that takes as input a time and a species name, and outputs a plot that compares a tellurium simulation of the species with a linearized model for the species (with S1 as input, as we did in lecture 9). Remember to document your function and include tests (as described in the rules for writing reproducible software).\n","\n","2) (3 pts) Use this function to analyze S2 and S3 for the operating points  0, 0.3, and 2.\n","\n","3) (2 pts) Where are the largest discrepancies between the original simulation and the linearized models? Why?"],"metadata":{"id":"SuALaEKS6sL_"}},{"cell_type":"markdown","source":["# NONLINEAR_MDL"],"metadata":{"id":"KQ1TyHnJP-HG"}},{"cell_type":"code","execution_count":2,"metadata":{"id":"2NMt-dFmDvT3","executionInfo":{"status":"ok","timestamp":1651103259979,"user_tz":420,"elapsed":8,"user":{"displayName":"Joseph Hellerstein","userId":"07301174361489660166"}}},"outputs":[],"source":["NONLINEAR_MDL = \"\"\"\n","JN1: S1 -> S2; k1*S1\n","JN2: S1 +  S2 -> 3 S3; k2*S1*S2\n","JN3: S3 -> ; k3*S3\n","JN4: 2 S1 + S3 -> S2; k4*S1*S3\n","\n","k1 = 2\n","k2 = 1.5\n","k3 = 1\n","k4 = 0.5\n","S1 = 10\n","S2 = 0\n","S3 = 0\n","\"\"\"\n","NONLINEAR_RR = te.loada(NONLINEAR_MDL)\n","NONLINEAR_DATA=NONLINEAR_RR.simulate()\n","#NONLINEAR_DATA[:,3:]"]},{"cell_type":"markdown","source":["# \"third\" times the charm??"],"metadata":{"id":"w5t9zPEd5-3C"}},{"cell_type":"markdown","source":["# Clean Slate "],"metadata":{"id":"_cVOz4AaA99y"}},{"cell_type":"code","source":["def getStateDct(time, roadrunner=NONLINEAR_RR):\n","    \"\"\"\n","    Retrieves the value of state at the specified time.\n","    Changes the time of the roadrunner.\n","    \n","    Parameters\n","    ----------\n","    time: float\n","    roadrunner: ExtendedRoadrunner\n","    \n","    Returns\n","    -------\n","    dict\n","        key: species name\n","        value: species value\n","    \"\"\"\n","    roadrunner.reset()\n","    if time > 0:\n","        roadrunner.simulate(0, time)\n","    species_lst = roadrunner.getFloatingSpeciesIds()\n","    dct = {s: roadrunner[s] for s in species_lst}\n","\n","    getStateValues = \n","        \n","# Tests\n","dct = getStateDct(0.5)\n","assert(len(dct) == 3)\n","dct1 = getStateDct(1)  # Get different values at a different time\n","assert(all([dct[s] != dct1[s] for s in dct.keys()]))"],"metadata":{"id":"ebf_kRY3X100","colab":{"base_uri":"https://localhost:8080/","height":133},"executionInfo":{"status":"error","timestamp":1651103260155,"user_tz":420,"elapsed":183,"user":{"displayName":"Joseph Hellerstein","userId":"07301174361489660166"}},"outputId":"2f874698-505d-4eb3-d674-59e23bb45c17"},"execution_count":3,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-3-40a3eae8c8b8>\"\u001b[0;36m, line \u001b[0;32m23\u001b[0m\n\u001b[0;31m    getStateValues =\u001b[0m\n\u001b[0m                     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","source":["NONLINEAR_RR = te.loada(NONLINEAR_MDL)\n","NONLINEAR_DATA=NONLINEAR_RR.simulate()\n","NONLINEAR_DATA[:,3:]\n","#control.TransferFunction(NONLINEAR_DATA[1:], NONLINEAR_DATA[4:])\n"],"metadata":{"id":"x6ozckxZBOof","executionInfo":{"status":"aborted","timestamp":1651103260152,"user_tz":420,"elapsed":179,"user":{"displayName":"Joseph Hellerstein","userId":"07301174361489660166"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def LINEARIZE(MODEL_SRT, OP_TIME, SPECIES):\n","  \"\"\"\"\n","\n","  -----\n","\n","\n","  ------\n","  \"\"\"\n","  \n","  roadrunner = te.loada(MODEL_SRT)\n","  \n","  #Simulate nonlinear model\n","  NONLINEAR_DATA = roadrunner.simulate()\n","  \n","  #Reset roadrunner simulation \n","  roadrunner.resetAll()\n","  control.TransferFunction()\n","  #simulate at operating point\n","  OP_VEC = roadrunner.getStateValues(OP_TIME)\n","  NUM_STATE = len(OP_VEC)\n","  X0 = roadrunner.getStateValues(0)\n","   \n","  #extract Jacobian  \n","  A = roadrunner.getFullJacobian(roadrunner.simulate(OP_TIME)) \n","  \n","  B = np.reshape(B, (NUM_STATE, 1))\n","  C = np.reshape(C, (1, NUM_STATE))\n","  D = 0 \n","\n","  control.StateSpace(A, B, C, D)\n"],"metadata":{"id":"ZjavVA1CCXzW","executionInfo":{"status":"aborted","timestamp":1651103260152,"user_tz":420,"elapsed":178,"user":{"displayName":"Joseph Hellerstein","userId":"07301174361489660166"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# things I have tried and dont like "],"metadata":{"id":"5CKXXws9A16s"}},{"cell_type":"code","source":["NONLINEAR_RR = te.loada(NONLINEAR_MDL)\n","NONLINEAR_DATA=NONLINEAR_RR.simulate()\n","NONLINEAR_DF = arrtoDF(NONLINEAR_DATA)\n"],"metadata":{"id":"OqjWYDofKIBR","executionInfo":{"status":"aborted","timestamp":1651103260153,"user_tz":420,"elapsed":179,"user":{"displayName":"Joseph Hellerstein","userId":"07301174361489660166"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def runSimulation(DataFrame, OP_TIME, species): #isPlot=true):\n","    '''\n","    Linearizes aroung operating point and produces plot of linear and nonlinear species \n","    \n","    Parameters\n","    ----------\n","    MODEL_Name : str\n","    OP_TIME : float\n","    Species : str\n","      e.g. 'S1', 'S2'\n","    isplot : TYPE, optional\n","        DESCRIPTION. The default is true.\n","\n","    Returns\n","    -------\n","    dict: \n","        key: pct\n","        value: DataFrame\n","\n","    '''\n","    roadrunner = te.loada(MODEL_STR)\n","    NONLIN = roadrunner[species]\n","    #simulate to operating point\n","    roadrunner.simulate(OP_TIME)\n","    OP_VEC = roadrunner.getStateValues(OP_TIME)\n","    NUM_STATE = len(OP_VEC)\n","    X0 = roadrunner.getStateValues(0)  \n","    #extract Jacobian  \n","    A = roadrunner.getFullJacobian() \n","    if not species in roadrunner.keys():\n","        raise ValueError(\"Unknown species name: %s\" % species)\n","    resultDct = {}\n","    for v in time:\n","        roadrunner.resetAll()\n","        NONLINEAR_SS = control.StateSpace(A,B,C,D)\n","        df = arrtoDF(control.forced_response(NONLINEAR_SS,  [0.1*v for v in range(51)], X0))\n","        #title = \"%s: %f (%d%%)\" %(parameter, newValue, percent)\n","        resultDct[species] = df\n","        #if isPlot:\n","          #  timePlots(df=df, title = title)\n","    return resultDct "],"metadata":{"id":"9ESKIFD3K-EQ","executionInfo":{"status":"aborted","timestamp":1651103260153,"user_tz":420,"elapsed":179,"user":{"displayName":"Joseph Hellerstein","userId":"07301174361489660166"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[""],"metadata":{"id":"-t29CVVqMPt9"}},{"cell_type":"code","source":["def LINEARIZE(OP_TIME,roadrunner):\n","  \"\"\"\n","  Sets the operating point for Jacobian matrix \n","\n","  Parameteres\n","  ------\n","  OP_TIME = float\n","  roadrunner: ExtendedRoadrunner\n","\n"," \n","  Returns\n","  ------\n","  \n","  \"\"\"\n","  roadrunner.reset()\n"," \n","  #simulate to operating point\n","  roadrunner.simulate(OP_TIME)\n","  OP_VEC = roadrunner.getStateValues(OP_TIME)\n","  NUM_STATE = len(OP_VEC)\n","  X0 = roadrunner.getStateValues(0)\n","  #extract Jacobian  \n","  A = roadrunner.getFullJacobian() \n","  B = np.array((NUM_STATE, 1))\n","  C = np.array((1, NUM_STATE))\n","\n","  NONLINEAR_SS = control.StateSpace(A,B,C,D)\n","  results = control.forced_response(NONLINEAR_SS,  [0.1*v for v in range(51)], X0)\n","  return results"],"metadata":{"id":"3Iq2cYbcO89j","executionInfo":{"status":"aborted","timestamp":1651103260153,"user_tz":420,"elapsed":179,"user":{"displayName":"Joseph Hellerstein","userId":"07301174361489660166"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Determin B and C for steady state\n","  B = INPUT\n","  C = OUTPUT\n","  # D for steady state \n","  D=[[0.]]\n","\n","  NONLINEAR_SS = control.StateSpace(A,B,C,D)\n","  control.forced_response(NONLINEAR_SS,  [0.1*v for v in range(51)], X0=getStateValues(0))\n","\n","  NONLINEAR_SS = control.StateSpace(A,B,C,D)\n","  control.forced_response(NONLINEAR_SS,  [0.1*v for v in range(51)], X0=getStateValues(0))"],"metadata":{"id":"0uY01ZjmfTKH","executionInfo":{"status":"aborted","timestamp":1651103260154,"user_tz":420,"elapsed":180,"user":{"displayName":"Joseph Hellerstein","userId":"07301174361489660166"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def analyze(time, species):\n","    \"\"\"\n","    Plots comparisons of the Tellurium simulation of the original model with\n","    its linearization at a time point for a particular species.\n","    The analysis is for NONLINEAR_MDL.\n","\n","    Parameters\n","    ----------\n","    time: float\n","    species: str\n","        e.g. \"S2\", \"S3\"\n","    \"\"\""],"metadata":{"id":"a_2-KAFQC-Fu","executionInfo":{"status":"aborted","timestamp":1651103260154,"user_tz":420,"elapsed":180,"user":{"displayName":"Joseph Hellerstein","userId":"07301174361489660166"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for time in [0, 0.3, 2.0]:\n","    for species in [\"S2\", \"S3\"]:\n","        analyze(time, species)"],"metadata":{"id":"0OWVXk0rDwa4","executionInfo":{"status":"aborted","timestamp":1651103260154,"user_tz":420,"elapsed":6,"user":{"displayName":"Joseph Hellerstein","userId":"07301174361489660166"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"r_OTmsWlDvT_","executionInfo":{"status":"aborted","timestamp":1651103260155,"user_tz":420,"elapsed":7,"user":{"displayName":"Joseph Hellerstein","userId":"07301174361489660166"}}},"outputs":[],"source":["# result.t are the times of the simulation\n","# result.y are the output values\n","plt.plot(result.t.flatten(), result.y.flatten())\n","plt.ylim([0, 10])\n","plt.title(\"S3 with initial conditions\")"]}]}